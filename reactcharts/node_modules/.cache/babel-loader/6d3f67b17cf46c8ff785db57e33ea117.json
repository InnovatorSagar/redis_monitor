{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PerformanceComponent/changeValue.js\";\nimport React, { Component } from \"react\";\nimport Performance from \"./Performance\";\nimport { connect } from \"react-redux\";\nimport { fetchNewData, set } from \"../../actions/dataActions\";\nimport { socket } from \"../../App.js\";\n\nvar ChangeValue =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChangeValue, _Component);\n\n  function ChangeValue(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeValue);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeValue).call(this, props));\n    _this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"Number of Clients of System\",\n          backgroundColor: [\"orange\"],\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              min: 0\n            }\n          }]\n        }\n      },\n      height: 160,\n      memory: null\n    };\n    return _this;\n  }\n\n  _createClass(ChangeValue, [{\n    key: \"change\",\n    value: function change(d) {\n      this.setState(function (prevState) {\n        return {\n          memory: d\n        };\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      socket.on(\"info\", function (data) {\n        _this2.change(data.metrics.performanceData);\n\n        var oldBtcDataSet = _this2.props.lineChartData.datasets[0];\n\n        var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n        newBtcDataSet.data.push(_this2.props.performanceData);\n\n        if (newBtcDataSet.data.length % 8 === 0) {\n          newBtcDataSet.data.shift();\n        }\n\n        var newChartData = _objectSpread({}, _this2.props.lineChartData, {\n          datasets: [newBtcDataSet],\n          labels: _this2.props.lineChartData.labels.concat(new Date().toLocaleTimeString())\n        });\n\n        if (newChartData.labels.length % 8 === 0) {\n          newChartData.labels.shift();\n        }\n\n        _this2.setState({\n          lineChartData: newChartData\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"chart_size\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"CPU Performance: \", this.props.performanceData, React.createElement(Performance, {\n        data: this.state.lineChartData,\n        options: this.state.lineChartOptions,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChangeValue;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    performanceData: state.data.performanceData,\n    lineChartData: state.data.lineChartData,\n    lineChartOptions: state.data.lineChartOptions,\n    height: state.data.height\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchNewData: fetchNewData,\n  set: set\n})(ChangeValue);","map":{"version":3,"sources":["/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PerformanceComponent/changeValue.js"],"names":["React","Component","Performance","connect","fetchNewData","set","socket","ChangeValue","props","state","lineChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","min","height","memory","d","setState","prevState","on","change","metrics","performanceData","oldBtcDataSet","newBtcDataSet","push","length","shift","newChartData","concat","Date","toLocaleTimeString","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Performance from \"./Performance\";\nimport { connect } from \"react-redux\";\nimport { fetchNewData, set } from \"../../actions/dataActions\";\nimport { socket } from \"../../App.js\";\n\nclass ChangeValue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"line\",\n            label: \"Number of Clients of System\",\n            backgroundColor: [\"orange\"],\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            data: []\n          }\n        ]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                min: 0\n              }\n            }\n          ]\n        }\n      },\n      height: 160,\n      memory: null\n    };\n  }\n  change(d) {\n    this.setState(prevState => ({\n      memory: d\n    }));\n  }\n\n  componentDidMount() {\n    socket.on(\"info\", data => {\n      this.change(data.metrics.performanceData);\n      const oldBtcDataSet = this.props.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(this.props.performanceData);\n      if (newBtcDataSet.data.length % 8 === 0) {\n        newBtcDataSet.data.shift();\n      }\n\n      const newChartData = {\n        ...this.props.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.props.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      if (newChartData.labels.length % 8 === 0) {\n        newChartData.labels.shift();\n      }\n      this.setState({ lineChartData: newChartData });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart_size\">\n        CPU Performance: {this.props.performanceData}\n        <Performance\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n          height={this.state.height}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  performanceData: state.data.performanceData,\n  lineChartData: state.data.lineChartData,\n  lineChartOptions: state.data.lineChartOptions,\n  height: state.data.height\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchNewData, set }\n)(ChangeValue);\n"]},"metadata":{},"sourceType":"module"}