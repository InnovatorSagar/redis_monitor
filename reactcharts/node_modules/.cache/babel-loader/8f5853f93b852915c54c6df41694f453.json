{"ast":null,"code":"import _classCallCheck from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PieChart.js\";\nimport React, { Component } from 'react';\nimport Piechart from './Pie';\nimport NavBar from './Nav';\nimport './changeValue.css';\nimport openSocket from 'socket.io-client';\nvar socket = openSocket('http://localhost:3000');\n\nvar PieChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PieChart, _Component);\n\n  function PieChart(props) {\n    var _this;\n\n    _classCallCheck(this, PieChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PieChart).call(this, props));\n    _this.state = {\n      pieChartData: {\n        labels: [],\n        datasets: [{\n          type: \"pie\",\n          label: \"Performance of System\",\n          backgroundColor: ['orange', 'blue'],\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          percentage: 0,\n          data: [_this.state.percentage, 100 - _this.state.percentage]\n        }]\n      },\n      pieChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false\n      },\n      height: 300,\n      memory: null\n    };\n    return _this;\n  }\n\n  _createClass(PieChart, [{\n    key: \"change\",\n    value: function change(memory) {\n      this.setState(function (prevState) {\n        return {\n          memory: memory / (1024 * 1024),\n          percentage: memory / 15.5\n        };\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      socket.on('info', function (data) {\n        _this2.change(data); // const oldBtcDataSet = this.state.pieChartData.datasets[0];\n        // const newBtcDataSet = { ...oldBtcDataSet };\n        // newBtcDataSet.data.push(this.state.memory);\n        // if(newBtcDataSet.data.length % 2 === 0) {\n        //   newBtcDataSet.data.shift();\n        // }\n        // const newChartData = {\n        //   ...this.state.pieChartData,\n        //   datasets: [newBtcDataSet],\n        //   labels: this.state.pieChartData.labels.concat( \n        //     new Date().toLocaleTimeString()\n        //   )\n        // };\n        // if(newChartData.labels.length % 2 === 0) {\n        //   newChartData.labels.shift();\n        // // }\n        // this.setState({ pieChartData: newChartData });\n\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chart_size\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"memory: \", this.state.memory, React.createElement(Piechart, {\n        data: this.state.pieChartData,\n        options: this.state.pieChartOptions,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PieChart;\n}(Component);\n\nexport default PieChart;","map":{"version":3,"sources":["/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PieChart.js"],"names":["React","Component","Piechart","NavBar","openSocket","socket","PieChart","props","state","pieChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","percentage","data","pieChartOptions","responsive","maintainAspectRatio","height","memory","setState","prevState","on","change"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAOC,MAAP,MAAmB,OAAnB;AACA,OAAO,mBAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,IAAMC,MAAM,GAAGD,UAAU,CAAC,uBAAD,CAAzB;;IAEME,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,MAAM,EAAE,EADI;AAEZC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,IAAI,EAAE,KADR;AAEEC,UAAAA,KAAK,EAAE,uBAFT;AAGEC,UAAAA,eAAe,EAAE,CAAC,QAAD,EAAW,MAAX,CAHnB;AAIEC,UAAAA,WAAW,EAAE,GAJf;AAKEC,UAAAA,WAAW,EAAE,IALf;AAMEC,UAAAA,UAAU,EAAE,CANd;AAOEC,UAAAA,IAAI,EAAE,CAAC,MAAKV,KAAL,CAAWS,UAAZ,EAAuB,MAAI,MAAKT,KAAL,CAAWS,UAAtC;AAPR,SADQ;AAFE,OADH;AAeXE,MAAAA,eAAe,EAAE;AACfC,QAAAA,UAAU,EAAE,IADG;AAEfC,QAAAA,mBAAmB,EAAE;AAFN,OAfN;AAmBXC,MAAAA,MAAM,EAAE,GAnBG;AAoBXC,MAAAA,MAAM,EAAE;AApBG,KAAb;AAFiB;AAwBlB;;;;2BACQA,M,EAAQ;AACX,WAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BF,UAAAA,MAAM,EAACA,MAAM,IAAE,OAAK,IAAP,CADa;AAE1BN,UAAAA,UAAU,EAACM,MAAM,GAAC;AAFQ,SAAL;AAAA,OAAvB;AAID;;;wCAEmB;AAAA;;AAClBlB,MAAAA,MAAM,CAACqB,EAAP,CAAU,MAAV,EAAkB,UAAAR,IAAI,EAAI;AACtB,QAAA,MAAI,CAACS,MAAL,CAAYT,IAAZ,EADsB,CAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,OAnBD;AAoBD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACW,KAAKV,KAAL,CAAWe,MADtB,EAEE,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKf,KAAL,CAAWC,YAA3B;AAAyC,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWW,eAA7D;AAA8E,QAAA,MAAM,EAAE,KAAKX,KAAL,CAAWc,MAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CAFF,CADF;AASD;;;;EAlEgBrB,S;;AAqEvB,eAAeK,QAAf","sourcesContent":["import React, {Component} from 'react';\nimport Piechart from './Pie';\nimport NavBar from './Nav';\nimport './changeValue.css';\nimport openSocket from 'socket.io-client';\nconst socket = openSocket('http://localhost:3000');\n\nclass PieChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pieChartData: {\n        labels: [],\n        datasets: [\n          {\n            type: \"pie\",\n            label: \"Performance of System\",\n            backgroundColor: ['orange', 'blue'],\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            percentage: 0,\n            data: [this.state.percentage,100-this.state.percentage]\n          }\n        ]\n      },\n      pieChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n      },\n      height: 300,\n      memory: null\n    };\n  }\n    change(memory) {\n        this.setState(prevState => ({\n          memory:memory/(1024*1024),\n          percentage:memory/15.5\n        }));\n      }\n\n      componentDidMount() {\n        socket.on('info', data => {\n            this.change(data);\n            // const oldBtcDataSet = this.state.pieChartData.datasets[0];\n            // const newBtcDataSet = { ...oldBtcDataSet };\n            // newBtcDataSet.data.push(this.state.memory);\n            // if(newBtcDataSet.data.length % 2 === 0) {\n            //   newBtcDataSet.data.shift();\n            // }\n            // const newChartData = {\n            //   ...this.state.pieChartData,\n            //   datasets: [newBtcDataSet],\n            //   labels: this.state.pieChartData.labels.concat( \n            //     new Date().toLocaleTimeString()\n            //   )\n            // };\n            // if(newChartData.labels.length % 2 === 0) {\n            //   newChartData.labels.shift();\n            // // }\n            // this.setState({ pieChartData: newChartData });\n        });\n      }\n    \n      render() {\n        return (\n          <div>\n            <NavBar />\n            <div className=\"chart_size\">\n              memory: {this.state.memory}\n              <Piechart data={this.state.pieChartData} options={this.state.pieChartOptions} height={this.state.height} />\n            </div>\n          </div>\n        );\n      }\n}\n\nexport default PieChart;\n"]},"metadata":{},"sourceType":"module"}