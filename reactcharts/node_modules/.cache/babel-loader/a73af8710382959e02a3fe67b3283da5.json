{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { NEW_DATA, SET_DATA } from \"../actions/types\";\nvar initialState = {\n  lineChartData: {\n    labels: [],\n    datasets: [{\n      type: \"line\",\n      label: \"Performance of System\",\n      backgroundColor: \"rgba(0, 0, 0, 0)\",\n      borderWidth: \"2\",\n      lineTension: 0.45,\n      data: []\n    }]\n  },\n  lineChartOptions: {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      xAxes: [{\n        ticks: {\n          autoSkip: true,\n          maxTicksLimit: 10\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          beginAtZero: true,\n          min: 0\n        }\n      }]\n    }\n  },\n  height: 100,\n  performanceData: 0,\n  numberOfClients: 0,\n  usedMemory: 0,\n  totalMemory: 0,\n  performanceFlag: false,\n  memoryFlag: false,\n  numberOfClientsFlag: false,\n  usedMemoryFlag: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NEW_DATA:\n      {\n        return _objectSpread({}, state, {\n          performanceData: action.payload.metrics.performanceData,\n          usedMemory: action.payload.metrics.usedMemory,\n          numberOfClients: action.payload.metrics.numberOfClients,\n          totalMemory: action.payload.metrics.totalMemory,\n          performanceFlag: action.payload.flags.performanceFlag,\n          memoryFlag: action.payload.flags.memoryFlag,\n          numberOfClientsFlag: action.payload.numberOfClientsFlag,\n          usedMemoryFlag: action.payload.usedMemoryFlag\n        });\n      }\n\n    case SET_DATA:\n      return _objectSpread({}, state, {\n        lineChartData: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/reducers/dataReducer.js"],"names":["NEW_DATA","SET_DATA","initialState","lineChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","beginAtZero","min","height","performanceData","numberOfClients","usedMemory","totalMemory","performanceFlag","memoryFlag","numberOfClientsFlag","usedMemoryFlag","state","action","payload","metrics","flags"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,EADK;AAEbC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,KAAK,EAAE,uBAFT;AAGEC,MAAAA,eAAe,EAAE,kBAHnB;AAIEC,MAAAA,WAAW,EAAE,GAJf;AAKEC,MAAAA,WAAW,EAAE,IALf;AAMEC,MAAAA,IAAI,EAAE;AANR,KADQ;AAFG,GADI;AAcnBC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,UAAU,EAAE,IADI;AAEhBC,IAAAA,mBAAmB,EAAE,KAFL;AAGhBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,IADL;AAELC,UAAAA,aAAa,EAAE;AAFV;AADT,OADK,CADD;AASNC,MAAAA,KAAK,EAAE,CACL;AACEH,QAAAA,KAAK,EAAE;AACLI,UAAAA,WAAW,EAAE,IADR;AAELC,UAAAA,GAAG,EAAE;AAFA;AADT,OADK;AATD;AAHQ,GAdC;AAoCnBC,EAAAA,MAAM,EAAE,GApCW;AAqCnBC,EAAAA,eAAe,EAAE,CArCE;AAsCnBC,EAAAA,eAAe,EAAE,CAtCE;AAuCnBC,EAAAA,UAAU,EAAE,CAvCO;AAwCnBC,EAAAA,WAAW,EAAE,CAxCM;AAyCnBC,EAAAA,eAAe,EAAE,KAzCE;AA0CnBC,EAAAA,UAAU,EAAE,KA1CO;AA2CnBC,EAAAA,mBAAmB,EAAE,KA3CF;AA4CnBC,EAAAA,cAAc,EAAE;AA5CG,CAArB;AA+CA,eAAe,YAAuC;AAAA,MAA9BC,KAA8B,uEAAtB9B,YAAsB;AAAA,MAAR+B,MAAQ;;AACpD,UAAQA,MAAM,CAAC3B,IAAf;AACE,SAAKN,QAAL;AAAe;AACb,iCACKgC,KADL;AAEER,UAAAA,eAAe,EAAES,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBX,eAF1C;AAGEE,UAAAA,UAAU,EAAEO,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBT,UAHrC;AAIED,UAAAA,eAAe,EAAEQ,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBV,eAJ1C;AAKEE,UAAAA,WAAW,EAAEM,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAuBR,WALtC;AAMEC,UAAAA,eAAe,EAAEK,MAAM,CAACC,OAAP,CAAeE,KAAf,CAAqBR,eANxC;AAOEC,UAAAA,UAAU,EAAEI,MAAM,CAACC,OAAP,CAAeE,KAAf,CAAqBP,UAPnC;AAQEC,UAAAA,mBAAmB,EAAEG,MAAM,CAACC,OAAP,CAAeJ,mBARtC;AASEC,UAAAA,cAAc,EAAEE,MAAM,CAACC,OAAP,CAAeH;AATjC;AAWD;;AACD,SAAK9B,QAAL;AACE,+BACK+B,KADL;AAEE7B,QAAAA,aAAa,EAAE8B,MAAM,CAACC;AAFxB;;AAIF;AACE,aAAOF,KAAP;AApBJ;AAsBD","sourcesContent":["import { NEW_DATA, SET_DATA } from \"../actions/types\";\n\nconst initialState = {\n  lineChartData: {\n    labels: [],\n    datasets: [\n      {\n        type: \"line\",\n        label: \"Performance of System\",\n        backgroundColor: \"rgba(0, 0, 0, 0)\",\n        borderWidth: \"2\",\n        lineTension: 0.45,\n        data: []\n      }\n    ]\n  },\n  lineChartOptions: {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 10\n          }\n        }\n      ],\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            min: 0\n          }\n        }\n      ]\n    }\n  },\n  height: 100,\n  performanceData: 0,\n  numberOfClients: 0,\n  usedMemory: 0,\n  totalMemory: 0,\n  performanceFlag: false,\n  memoryFlag: false,\n  numberOfClientsFlag: false,\n  usedMemoryFlag: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case NEW_DATA: {\n      return {\n        ...state,\n        performanceData: action.payload.metrics.performanceData,\n        usedMemory: action.payload.metrics.usedMemory,\n        numberOfClients: action.payload.metrics.numberOfClients,\n        totalMemory: action.payload.metrics.totalMemory,\n        performanceFlag: action.payload.flags.performanceFlag,\n        memoryFlag: action.payload.flags.memoryFlag,\n        numberOfClientsFlag: action.payload.numberOfClientsFlag,\n        usedMemoryFlag: action.payload.usedMemoryFlag\n      };\n    }\n    case SET_DATA:\n      return {\n        ...state,\n        lineChartData: action.payload\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}