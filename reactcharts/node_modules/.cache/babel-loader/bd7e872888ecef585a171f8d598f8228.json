{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/Desktop/reactcharts/src/Components/changeValue.js\";\nimport React, { Component } from 'react';\nimport Performance from './Performance';\nimport NavBar from './Nav';\n\nvar ChangeValue =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChangeValue, _Component);\n\n  function ChangeValue(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeValue);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeValue).call(this, props));\n    _this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"Performance of System\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false\n      },\n      a: null,\n      b: null\n    };\n    return _this;\n  }\n\n  _createClass(ChangeValue, [{\n    key: \"change\",\n    value: function change() {\n      this.setState(function (prevState) {\n        return {\n          a: prevState.a + 1,\n          b: prevState.b + 1\n        };\n      });\n    }\n  }, {\n    key: \"makegraph\",\n    value: function makegraph() {\n      this.change();\n      var oldBtcDataSet = this.state.lineChartData.datasets[0];\n\n      var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n      newBtcDataSet.data.push(this.state.a + this.state.b);\n\n      var newChartData = _objectSpread({}, this.state.lineChartData, {\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(new Date().toLocaleTimeString())\n      });\n\n      this.setState({\n        lineChartData: newChartData\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interval = setInterval(function () {\n        return _this2.makegraph();\n      }, 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), \"a: \", this.state.a, \"; b: \", this.state.b, \";\", React.createElement(Performance, {\n        data: this.state.lineChartData,\n        options: this.state.lineChartOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChangeValue;\n}(Component);\n\nexport default ChangeValue;","map":{"version":3,"sources":["/home/sanchit_agarwal/Desktop/reactcharts/src/Components/changeValue.js"],"names":["React","Component","Performance","NavBar","ChangeValue","props","state","lineChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","a","b","setState","prevState","change","oldBtcDataSet","newBtcDataSet","push","newChartData","concat","Date","toLocaleTimeString","interval","setInterval","makegraph"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,OAAnB;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE;AACXC,QAAAA,MAAM,EAAE,EADG;AAEXC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,KAAK,EAAE,uBAFT;AAGEC,UAAAA,eAAe,EAAE,kBAHnB;AAIEC,UAAAA,WAAW,EAAE,GAJf;AAKEC,UAAAA,WAAW,EAAE,IALf;AAMEC,UAAAA,IAAI,EAAE;AANR,SADQ;AAFC,OADN;AAcTC,MAAAA,gBAAgB,EAAE;AACdC,QAAAA,UAAU,EAAE,IADE;AAEdC,QAAAA,mBAAmB,EAAE;AAFP,OAdT;AAkBTC,MAAAA,CAAC,EAAE,IAlBM;AAmBTC,MAAAA,CAAC,EAAE;AAnBM,KAAb;AAFe;AAuBlB;;;;6BAEQ;AACL,WAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BH,UAAAA,CAAC,EAAEG,SAAS,CAACH,CAAV,GAAc,CADS;AAE1BC,UAAAA,CAAC,EAAEE,SAAS,CAACF,CAAV,GAAc;AAFS,SAAL;AAAA,OAAvB;AAID;;;gCAEW;AACV,WAAKG,MAAL;AACA,UAAMC,aAAa,GAAG,KAAKlB,KAAL,CAAWC,aAAX,CAAyBE,QAAzB,CAAkC,CAAlC,CAAtB;;AACA,UAAMgB,aAAa,qBAAQD,aAAR,CAAnB;;AACAC,MAAAA,aAAa,CAACV,IAAd,CAAmBW,IAAnB,CAAwB,KAAKpB,KAAL,CAAWa,CAAX,GAAe,KAAKb,KAAL,CAAWc,CAAlD;;AAEF,UAAMO,YAAY,qBACX,KAAKrB,KAAL,CAAWC,aADA;AAEdE,QAAAA,QAAQ,EAAE,CAACgB,aAAD,CAFI;AAGdjB,QAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWC,aAAX,CAAyBC,MAAzB,CAAgCoB,MAAhC,CACN,IAAIC,IAAJ,GAAWC,kBAAX,EADM;AAHM,QAAlB;;AAOE,WAAKT,QAAL,CAAc;AAAEd,QAAAA,aAAa,EAAEoB;AAAjB,OAAd;AAED;;;wCACmB;AAAA;;AAClB,WAAKI,QAAL,GAAgBC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACC,SAAL,EAAN;AAAA,OAAD,EAAyB,IAAzB,CAA3B;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,SAEM,KAAK3B,KAAL,CAAWa,CAFjB,WAGM,KAAKb,KAAL,CAAWc,CAHjB,OAIE,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAE,KAAKd,KAAL,CAAWC,aAA9B;AAA6C,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWU,gBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD;;;;EA9DmBf,S;;AAiE1B,eAAeG,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Performance from './Performance';\nimport NavBar from './Nav';\n\nclass ChangeValue extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lineChartData: {\n                labels: [],\n                datasets: [\n                  {\n                    type: \"line\",\n                    label: \"Performance of System\",\n                    backgroundColor: \"rgba(0, 0, 0, 0)\",\n                    borderWidth: \"2\",\n                    lineTension: 0.45,\n                    data: []\n                  }\n                ]\n              },\n            lineChartOptions: {\n                responsive: true,\n                maintainAspectRatio: false,\n            },\n            a: null,\n            b: null\n        }\n    }\n\n    change() {\n        this.setState(prevState => ({\n          a: prevState.a + 1,\n          b: prevState.b + 1\n        }));\n      }\n    \n      makegraph() {\n        this.change();\n        const oldBtcDataSet = this.state.lineChartData.datasets[0];\n        const newBtcDataSet = { ...oldBtcDataSet };\n        newBtcDataSet.data.push(this.state.a + this.state.b);\n  \n      const newChartData = {\n          ...this.state.lineChartData,\n          datasets: [newBtcDataSet],\n          labels: this.state.lineChartData.labels.concat(\n            new Date().toLocaleTimeString()\n          )\n        };\n        this.setState({ lineChartData: newChartData });\n\n      }\n      componentDidMount() {\n        this.interval = setInterval(() => this.makegraph(), 1000);\n      }\n\n      render() {\n        return (\n          <div>\n            <NavBar />\n            a: {this.state.a};\n            b: {this.state.b};\n            <Performance data={this.state.lineChartData} options={this.state.lineChartOptions} />\n          </div>\n        );\n      }\n}\n\nexport default ChangeValue;"]},"metadata":{},"sourceType":"module"}