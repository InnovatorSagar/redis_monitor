{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/MemoryComponent/MemoryChart.js\";\nimport React, { Component } from \"react\";\nimport Memory from \"./Memory\";\nimport \"../Chart.css\";\nimport openSocket from \"socket.io-client\";\nvar socket = openSocket(\"http://localhost:4000\");\n\nvar MemoryChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemoryChart, _Component);\n\n  function MemoryChart(props) {\n    var _this;\n\n    _classCallCheck(this, MemoryChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryChart).call(this, props));\n    _this.state = {\n      pieChartData: {\n        labels: [\"Memory useage at start time\"],\n        datasets: [{\n          type: \"pie\",\n          label: \"Performance of System\",\n          backgroundColor: [\"orange\", \"blue\"],\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          percentage: 0,\n          data: [0, 100]\n        }]\n      },\n      pieChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false\n      },\n      height: 300,\n      memory: 100\n    };\n    return _this;\n  }\n\n  _createClass(MemoryChart, [{\n    key: \"change\",\n    value: function change(d) {\n      this.setState(function (prevState) {\n        return {\n          memory: d / (1024 * 1024) * 10000\n        };\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      socket.on(\"info\", function (data) {\n        _this2.change(data.metrics.usedMemory);\n\n        _this2.setState({\n          percentage: _this2.state.memory\n        });\n\n        var oldDataSet = _this2.state.pieChartData.datasets[0]; //   if (this.state.memory !== oldDataSet.data[0]) {\n\n        var newDataSet = _objectSpread({}, oldDataSet);\n\n        newDataSet.data.splice(0, newDataSet.data.length);\n        newDataSet.data.push(_this2.state.percentage);\n        newDataSet.data.push(100 - _this2.state.percentage);\n\n        var newChartData = _objectSpread({}, _this2.state.pieChartData, {\n          datasets: [newDataSet],\n          labels: _this2.state.pieChartData.labels.concat(\"Memory useage at time \" + new Date().toLocaleTimeString())\n        });\n\n        if (newChartData.labels.length % 2 === 0) {\n          newChartData.labels.shift();\n        }\n\n        _this2.setState({\n          pieChartData: newChartData\n        }); //   }\n\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chart_size\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Memory: \", this.state.memory, React.createElement(Memory, {\n        data: this.state.pieChartData,\n        options: this.state.pieChartOptions,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MemoryChart;\n}(Component);\n\nexport default MemoryChart;","map":{"version":3,"sources":["/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/MemoryComponent/MemoryChart.js"],"names":["React","Component","Memory","openSocket","socket","MemoryChart","props","state","pieChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","percentage","data","pieChartOptions","responsive","maintainAspectRatio","height","memory","d","setState","prevState","on","change","metrics","usedMemory","oldDataSet","newDataSet","splice","length","push","newChartData","concat","Date","toLocaleTimeString","shift"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Memory from \"./Memory\";\nimport \"../Chart.css\";\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket(\"http://localhost:4000\");\n\nclass MemoryChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pieChartData: {\n        labels: [\"Memory useage at start time\"],\n        datasets: [\n          {\n            type: \"pie\",\n            label: \"Performance of System\",\n            backgroundColor: [\"orange\", \"blue\"],\n            borderWidth: \"2\",\n            lineTension: 0.45,\n            percentage: 0,\n            data: [0, 100]\n          }\n        ]\n      },\n      pieChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false\n      },\n      height: 300,\n      memory: 100\n    };\n  }\n  change(d) {\n    this.setState(prevState => ({\n      memory: (d / (1024 * 1024)) * 10000\n    }));\n  }\n\n  componentDidMount() {\n    socket.on(\"info\", data => {\n      this.change(data.metrics.usedMemory);\n      this.setState({ percentage: this.state.memory });\n      const oldDataSet = this.state.pieChartData.datasets[0];\n      //   if (this.state.memory !== oldDataSet.data[0]) {\n      const newDataSet = { ...oldDataSet };\n      newDataSet.data.splice(0, newDataSet.data.length);\n      newDataSet.data.push(this.state.percentage);\n      newDataSet.data.push(100 - this.state.percentage);\n      const newChartData = {\n        ...this.state.pieChartData,\n        datasets: [newDataSet],\n        labels: this.state.pieChartData.labels.concat(\n          \"Memory useage at time \" + new Date().toLocaleTimeString()\n        )\n      };\n      if (newChartData.labels.length % 2 === 0) {\n        newChartData.labels.shift();\n      }\n      this.setState({ pieChartData: newChartData });\n      //   }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"chart_size\">\n          Memory: {this.state.memory}\n          <Memory\n            data={this.state.pieChartData}\n            options={this.state.pieChartOptions}\n            height={this.state.height}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemoryChart;\n"]},"metadata":{},"sourceType":"module"}