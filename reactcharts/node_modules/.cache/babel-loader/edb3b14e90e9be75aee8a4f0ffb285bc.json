{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/Desktop/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/Desktop/reactcharts/src/Components/PerformanceData.js\";\nimport React, { Component } from 'react';\nimport Performance from './Performance';\nimport NavBar from './Nav';\n\nvar PerformanceData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PerformanceData, _Component);\n\n  function PerformanceData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PerformanceData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PerformanceData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"Performance of System\",\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }]\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(PerformanceData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var subscribe = {\n        type: \"subscribe\",\n        channels: [{\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"]\n        }]\n      };\n      this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n      this.ws.onopen = function () {\n        _this2.ws.send(JSON.stringify(subscribe));\n      };\n\n      this.ws.onmessage = function (e) {\n        var value = JSON.parse(e.data);\n\n        if (value.type !== \"ticker\") {\n          return;\n        }\n\n        var oldBtcDataSet = _this2.state.lineChartData.datasets[0];\n\n        var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n        newBtcDataSet.data.push(value.price);\n\n        var newChartData = _objectSpread({}, _this2.state.lineChartData, {\n          datasets: [newBtcDataSet],\n          labels: _this2.state.lineChartData.labels.concat(new Date().toLocaleTimeString())\n        });\n\n        _this2.setState({\n          lineChartData: newChartData\n        });\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(Performance, {\n        data: this.state.lineChartData,\n        options: this.state.lineChartOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PerformanceData;\n}(Component);\n\nexport default PerformanceData;","map":{"version":3,"sources":["/home/sanchit_agarwal/Desktop/reactcharts/src/Components/PerformanceData.js"],"names":["React","Component","Performance","NavBar","PerformanceData","state","lineChartData","labels","datasets","type","label","backgroundColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","subscribe","channels","name","product_ids","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","push","price","newChartData","concat","Date","toLocaleTimeString","setState"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,OAAnB;;IAEMC,e;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,aAAa,EAAE;AACbC,QAAAA,MAAM,EAAE,EADK;AAEbC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,KAAK,EAAE,uBAFT;AAGEC,UAAAA,eAAe,EAAE,kBAHnB;AAIEC,UAAAA,WAAW,EAAE,GAJf;AAKEC,UAAAA,WAAW,EAAE,IALf;AAMEC,UAAAA,IAAI,EAAE;AANR,SADQ;AAFG,OADX;AAcJC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,UAAU,EAAE,IADI;AAEhBC,QAAAA,mBAAmB,EAAE,KAFL;AAGhBC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAE;AADD,SAHM;AAMhBC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,KAAK,EAAE;AACLC,cAAAA,QAAQ,EAAE,IADL;AAELC,cAAAA,aAAa,EAAE;AAFV;AADT,WADK;AADD;AANQ;AAdd,K;;;;;;wCAiCc;AAAA;;AAClB,UAAMC,SAAS,GAAG;AAChBhB,QAAAA,IAAI,EAAE,WADU;AAEhBiB,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,IAAI,EAAE,QADR;AAEEC,UAAAA,WAAW,EAAE,CAAC,SAAD;AAFf,SADQ;AAFM,OAAlB;AAUA,WAAKC,EAAL,GAAU,IAAIC,SAAJ,CAAc,wBAAd,CAAV;;AAEA,WAAKD,EAAL,CAAQE,MAAR,GAAiB,YAAM;AACrB,QAAA,MAAI,CAACF,EAAL,CAAQG,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAAb;AACD,OAFD;;AAIA,WAAKI,EAAL,CAAQM,SAAR,GAAoB,UAAAC,CAAC,EAAI;AACvB,YAAMC,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAWF,CAAC,CAACtB,IAAb,CAAd;;AACA,YAAIuB,KAAK,CAAC5B,IAAN,KAAe,QAAnB,EAA6B;AAC3B;AACD;;AAED,YAAM8B,aAAa,GAAG,MAAI,CAAClC,KAAL,CAAWC,aAAX,CAAyBE,QAAzB,CAAkC,CAAlC,CAAtB;;AACA,YAAMgC,aAAa,qBAAQD,aAAR,CAAnB;;AACAC,QAAAA,aAAa,CAAC1B,IAAd,CAAmB2B,IAAnB,CAAwBJ,KAAK,CAACK,KAA9B;;AAEA,YAAMC,YAAY,qBACb,MAAI,CAACtC,KAAL,CAAWC,aADE;AAEhBE,UAAAA,QAAQ,EAAE,CAACgC,aAAD,CAFM;AAGhBjC,UAAAA,MAAM,EAAE,MAAI,CAACF,KAAL,CAAWC,aAAX,CAAyBC,MAAzB,CAAgCqC,MAAhC,CACN,IAAIC,IAAJ,GAAWC,kBAAX,EADM;AAHQ,UAAlB;;AAOA,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEzC,UAAAA,aAAa,EAAEqC;AAAjB,SAAd;AACD,OAlBD;AAmBD;;;6BAEQ;AACP,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAE,KAAKtC,KAAL,CAAWC,aADnB;AAEE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWU,gBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADJ;AASC;;;;EAnFqBd,S;;AAsF9B,eAAeG,eAAf","sourcesContent":["import React, {Component} from 'react';\nimport Performance from './Performance';\nimport NavBar from './Nav';\n\nclass PerformanceData extends Component {\n\n    state = {\n        lineChartData: {\n          labels: [],\n          datasets: [\n            {\n              type: \"line\",\n              label: \"Performance of System\",\n              backgroundColor: \"rgba(0, 0, 0, 0)\",\n              borderWidth: \"2\",\n              lineTension: 0.45,\n              data: []\n            }\n          ]\n        },\n        lineChartOptions: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            enabled: true\n          },\n          scales: {\n            xAxes: [\n              {\n                ticks: {\n                  autoSkip: true,\n                  maxTicksLimit: 10\n                }\n              }\n            ]\n          }\n        }\n      };\n      \n      componentDidMount() {\n        const subscribe = {\n          type: \"subscribe\",\n          channels: [\n            {\n              name: \"ticker\",\n              product_ids: [\"BTC-USD\"]\n            }\n          ]\n        };\n    \n        this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n    \n        this.ws.onopen = () => {\n          this.ws.send(JSON.stringify(subscribe));\n        };\n    \n        this.ws.onmessage = e => {\n          const value = JSON.parse(e.data);\n          if (value.type !== \"ticker\") {\n            return;\n          }\n    \n          const oldBtcDataSet = this.state.lineChartData.datasets[0];\n          const newBtcDataSet = { ...oldBtcDataSet };\n          newBtcDataSet.data.push(value.price);\n    \n          const newChartData = {\n            ...this.state.lineChartData,\n            datasets: [newBtcDataSet],\n            labels: this.state.lineChartData.labels.concat(\n              new Date().toLocaleTimeString()\n            )\n          };\n          this.setState({ lineChartData: newChartData });\n        };\n      }\n      \n      render() {\n        return (\n            <div>\n              <NavBar />\n              <Performance\n                data={this.state.lineChartData}\n                options={this.state.lineChartOptions}\n              />\n            </div>\n          );\n        }\n}\n\nexport default PerformanceData;"]},"metadata":{},"sourceType":"module"}