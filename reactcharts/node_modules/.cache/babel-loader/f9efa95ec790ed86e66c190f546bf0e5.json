{"ast":null,"code":"import _objectSpread from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PerformanceComponent/changeValue.js\";\nimport React, { Component } from \"react\";\nimport Performance from \"./Performance\";\nimport { connect } from \"react-redux\";\nimport { fetchNewData, set } from \"../../actions/dataActions\";\nimport { socket } from \"../../App.js\";\n\nvar ChangeValue =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChangeValue, _Component);\n\n  function ChangeValue() {\n    _classCallCheck(this, ChangeValue);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChangeValue).apply(this, arguments));\n  }\n\n  _createClass(ChangeValue, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      socket.on(\"info\", function (data) {\n        _this.props.fetchNewData(data);\n\n        var oldBtcDataSet = _this.props.lineChartData.datasets[0];\n\n        var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n        newBtcDataSet.data.push(_this.props.performanceData);\n\n        if (newBtcDataSet.data.length % 8 === 0) {\n          newBtcDataSet.data.shift();\n        }\n\n        var newChartData = _objectSpread({}, _this.props.lineChartData, {\n          datasets: [newBtcDataSet],\n          labels: _this.props.lineChartData.labels.concat(new Date().toLocaleTimeString())\n        });\n\n        if (newChartData.labels.length % 8 === 0) {\n          newChartData.labels.shift();\n        }\n\n        _this.props.set(newChartData);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"chart_size\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"CPU Performance: \", this.props.performanceData, React.createElement(Performance, {\n        data: this.props.lineChartData,\n        options: this.props.lineChartOptions,\n        height: this.props.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChangeValue;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    performanceData: state.data.performanceData,\n    lineChartData: state.data.lineChartData,\n    lineChartOptions: state.data.lineChartOptions,\n    height: state.data.height\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchNewData: fetchNewData,\n  set: set\n})(ChangeValue);","map":{"version":3,"sources":["/home/sanchit_agarwal/rdbAlert/rdbalert/reactcharts/src/Components/PerformanceComponent/changeValue.js"],"names":["React","Component","Performance","connect","fetchNewData","set","socket","ChangeValue","on","data","props","oldBtcDataSet","lineChartData","datasets","newBtcDataSet","push","performanceData","length","shift","newChartData","labels","concat","Date","toLocaleTimeString","lineChartOptions","height","mapStateToProps","state"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,2BAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;;IAEMC,W;;;;;;;;;;;;;wCACgB;AAAA;;AAClBD,MAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkB,UAAAC,IAAI,EAAI;AACxB,QAAA,KAAI,CAACC,KAAL,CAAWN,YAAX,CAAwBK,IAAxB;;AACA,YAAME,aAAa,GAAG,KAAI,CAACD,KAAL,CAAWE,aAAX,CAAyBC,QAAzB,CAAkC,CAAlC,CAAtB;;AACA,YAAMC,aAAa,qBAAQH,aAAR,CAAnB;;AACAG,QAAAA,aAAa,CAACL,IAAd,CAAmBM,IAAnB,CAAwB,KAAI,CAACL,KAAL,CAAWM,eAAnC;;AACA,YAAIF,aAAa,CAACL,IAAd,CAAmBQ,MAAnB,GAA4B,CAA5B,KAAkC,CAAtC,EAAyC;AACvCH,UAAAA,aAAa,CAACL,IAAd,CAAmBS,KAAnB;AACD;;AAED,YAAMC,YAAY,qBACb,KAAI,CAACT,KAAL,CAAWE,aADE;AAEhBC,UAAAA,QAAQ,EAAE,CAACC,aAAD,CAFM;AAGhBM,UAAAA,MAAM,EAAE,KAAI,CAACV,KAAL,CAAWE,aAAX,CAAyBQ,MAAzB,CAAgCC,MAAhC,CACN,IAAIC,IAAJ,GAAWC,kBAAX,EADM;AAHQ,UAAlB;;AAOA,YAAIJ,YAAY,CAACC,MAAb,CAAoBH,MAApB,GAA6B,CAA7B,KAAmC,CAAvC,EAA0C;AACxCE,UAAAA,YAAY,CAACC,MAAb,CAAoBF,KAApB;AACD;;AACD,QAAA,KAAI,CAACR,KAAL,CAAWL,GAAX,CAAec,YAAf;AACD,OApBD;AAqBD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACoB,KAAKT,KAAL,CAAWM,eAD/B,EAEE,oBAAC,WAAD;AACE,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWE,aADnB;AAEE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWc,gBAFtB;AAGE,QAAA,MAAM,EAAE,KAAKd,KAAL,CAAWe,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAUD;;;;EApCuBxB,S;;AAuC1B,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCX,IAAAA,eAAe,EAAEW,KAAK,CAAClB,IAAN,CAAWO,eADI;AAEhCJ,IAAAA,aAAa,EAAEe,KAAK,CAAClB,IAAN,CAAWG,aAFM;AAGhCY,IAAAA,gBAAgB,EAAEG,KAAK,CAAClB,IAAN,CAAWe,gBAHG;AAIhCC,IAAAA,MAAM,EAAEE,KAAK,CAAClB,IAAN,CAAWgB;AAJa,GAAL;AAAA,CAA7B;;AAOA,eAAetB,OAAO,CACpBuB,eADoB,EAEpB;AAAEtB,EAAAA,YAAY,EAAZA,YAAF;AAAgBC,EAAAA,GAAG,EAAHA;AAAhB,CAFoB,CAAP,CAGbE,WAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Performance from \"./Performance\";\nimport { connect } from \"react-redux\";\nimport { fetchNewData, set } from \"../../actions/dataActions\";\nimport { socket } from \"../../App.js\";\n\nclass ChangeValue extends Component {\n  componentDidMount() {\n    socket.on(\"info\", data => {\n      this.props.fetchNewData(data);\n      const oldBtcDataSet = this.props.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(this.props.performanceData);\n      if (newBtcDataSet.data.length % 8 === 0) {\n        newBtcDataSet.data.shift();\n      }\n\n      const newChartData = {\n        ...this.props.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.props.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n      if (newChartData.labels.length % 8 === 0) {\n        newChartData.labels.shift();\n      }\n      this.props.set(newChartData);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chart_size\">\n        CPU Performance: {this.props.performanceData}\n        <Performance\n          data={this.props.lineChartData}\n          options={this.props.lineChartOptions}\n          height={this.props.height}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  performanceData: state.data.performanceData,\n  lineChartData: state.data.lineChartData,\n  lineChartOptions: state.data.lineChartOptions,\n  height: state.data.height\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchNewData, set }\n)(ChangeValue);\n"]},"metadata":{},"sourceType":"module"}